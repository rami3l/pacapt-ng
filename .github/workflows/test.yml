name: test

on:
  pull_request:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # https://users.rust-lang.org/t/cross-compiling-how-to-statically-link-glibc/83907/2
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
  # https://github.com/Mozilla-Actions/sccache-action#rust-code
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: sccache

jobs:
  skip-check:
    continue-on-error: false
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          concurrent_skipping: same_content
          do_not_skip: '["pull_request"]'

  build:
    name: build (${{ matrix.os }} native + ${{ matrix.target2 }})
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            # target: x86_64-pc-windows-msvc
            target2: aarch64-pc-windows-msvc
          - os: macos-14
            # target: aarch64-apple-darwin
            target2: x86_64-apple-darwin
          - os: ubuntu-latest
            # target: x86_64-unknown-linux-musl
            target2: aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - name: Setup extra build tools
        if: matrix.target2 == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Setup Rust
        if: ${{ steps.cache_build.outputs.cache-hit != 'true' }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target2 }}
      - name: Setup cargo-binstall
        if: github.event_name == 'pull_request' && matrix.os != 'windows-latest' #HACK: Work around https://github.com/cargo-bins/cargo-binstall/issues/1080.
        uses: cargo-bins/cargo-binstall@main
      - name: Test installation via cargo-binstall (${{ matrix.os }} native)
        if: github.event_name == 'pull_request' && matrix.os != 'windows-latest' #HACK: Work around https://github.com/cargo-bins/cargo-binstall/issues/1080.
        run: |
          cargo binstall pacaptr --manifest-path=./Cargo.toml --dry-run --strategies=crate-meta-data --log-level=debug
      - name: Test installation via cargo-binstall (${{ matrix.target2 }})
        if: github.event_name == 'pull_request' && matrix.os != 'windows-latest' #HACK: Work around https://github.com/cargo-bins/cargo-binstall/issues/1080.
        run: |
          cargo binstall pacaptr --manifest-path=./Cargo.toml --dry-run --strategies=crate-meta-data --log-level=debug --targets=${{ matrix.target2 }}
      - name: Build
        if: ${{ steps.cache_build.outputs.cache-hit != 'true' }}
        run: |
          cargo build --verbose --locked
          cargo build --verbose --locked --target=${{ matrix.target2 }}

  choco-test:
    runs-on: windows-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-pc-windows-msvc
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test choco -- --test-threads=1
          cargo test --features=test choco -- --ignored --test-threads=1

  scoop-winget-test:
    runs-on: windows-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Install scoop
        shell: powershell
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          iwr -useb 'https://raw.githubusercontent.com/scoopinstaller/install/master/install.ps1' -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          (Resolve-Path ~\scoop\shims).Path >> $Env:GITHUB_PATH
      - name: Verify scoop installation
        run: |
          Get-Command scoop
          powershell scoop help
      # Ironically, to install winget we need to install scoop first :D
      # See: https://github.com/microsoft/winget-cli/issues/1328#issuecomment-1208640211
      - name: Install winget
        shell: powershell
        run: scoop install winget
      - name: Verify winget installation
        run: |
          Get-Command winget
          winget --info
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-pc-windows-msvc
        run: |
          cargo build --verbose
          cargo test --features=test tests

          cargo test --features=test scoop
          cargo test --features=test winget

          cargo test --features=test scoop -- --ignored
          cargo test --features=test winget -- --ignored

  brew-test:
    runs-on: macos-14
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: aarch64-apple-darwin
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test brew
          cargo test --features=test brew -- --ignored

  port-test:
    runs-on: macos-14
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Get OS build
        run: |
          sw_vers > macos_build.txt
          cat macos_build.txt
      # https://github.com/actions/cache/issues/629#issuecomment-1189184648
      - name: Create gtar wrapper
        run: |
          mkdir target
          cat << EOF > "target/gtar"
          #!/bin/sh
          exec sudo /opt/homebrew/bin/gtar.orig "$@"
          EOF
      - name: Install gtar wrapper
        run: |
          sudo mv /opt/homebrew/bin/gtar /opt/homebrew/bin/gtar.orig
          sudo mv target/gtar /opt/homebrew/bin/gtar
          sudo chmod +x /opt/homebrew/bin/gtar
      - name: Cache MacPorts
        id: cache-macports
        uses: actions/cache@v4
        with:
          path: /opt/local/
          key: ${{ runner.os }}-macports-${{ hashFiles('macos_build.txt') }}
      - name: Restore MacPorts PATH
        if: steps.cache-macports.outputs.cache-hit == 'true'
        run: echo "/opt/local/bin" >> "$GITHUB_PATH"
      - name: Install MacPorts
        if: steps.cache-macports.outputs.cache-hit != 'true'
        run: |
          curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
          source ./macports-ci install
          sudo port install wget
          port installed
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: aarch64-apple-darwin
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test port
          cargo test --features=test port -- --ignored

  apt-test:
    runs-on: ubuntu-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test apt
          cargo test --features=test apt -- --ignored

  dnf-test:
    runs-on: ubuntu-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    container:
      image: fedora:latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup extra build tools
        run: dnf install -y make automake gcc gcc-c++ kernel-devel
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test dnf
          cargo test --features=test dnf -- --ignored

  emerge-test:
    runs-on: ubuntu-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    container:
      image: gentoo/stage3
    steps:
      - uses: actions/checkout@v4
      - name: Setup extra build tools
        run: |
          # `pacaptr -Ss` might fail without this line.
          emerge --sync || true
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test emerge
          cargo test --features=test emerge -- --ignored

  xbps-test:
    runs-on: ubuntu-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    container:
      image: ghcr.io/void-linux/void-glibc-full:latest
    steps:
      - name: Setup extra build tools
        run: |
          xbps-install -y -Su || (xbps-install -y -u xbps && xbps-install -y -Su)
          xbps-install -y base-devel curl bash
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test xbps
          cargo test --features=test xbps -- --ignored

  zypper-test:
    runs-on: ubuntu-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    container:
      image: registry.opensuse.org/opensuse/bci/rust:latest
    steps:
      - name: Setup extra build tools
        run: zypper install -y tar gzip curl gcc bash
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test zypper -- --test-threads=1
          cargo test --features=test zypper -- --ignored --test-threads=1

  apk-test:
    runs-on: ubuntu-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    container:
      image: rust:alpine
    steps:
      - name: Setup extra build tools
        run: |
          apk add -U build-base tar bash
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - name: Build and run tests
        env:
          RUSTFLAGS: "-C target-feature=-crt-static"
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
        run: |
          cargo build --verbose
          cargo test --features=test tests
          cargo test --features=test apk
          cargo test --features=test apk -- --ignored

  pkcon-pip-conda-test:
    runs-on: ubuntu-latest
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup extra build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y packagekit packagekit-tools gcc-aarch64-linux-gnu
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - name: Build and run tests
        env:
          CARGO_BUILD_TARGET: x86_64-unknown-linux-musl
        run: |
          cargo build --verbose

          cargo test --features=test pkcon
          cargo test --features=test pip
          cargo test --features=test conda

          cargo test --features=test pkcon -- --ignored
          cargo test --features=test pip -- --ignored
          cargo test --features=test conda -- --ignored

  # https://github.com/PyO3/pyo3/blob/42601f3af94242b017402b763a495798a92da8f8/.github/workflows/ci.yml#L452-L472
  conclusion:
    needs:
      - build
      - choco-test
      - scoop-winget-test
      - brew-test
      - port-test
      - apt-test
      - dnf-test
      - emerge-test
      - xbps-test
      - zypper-test
      - apk-test
      - pkcon-pip-conda-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Result
        run: |
          jq -C <<< "${needs}"
          # Check if all needs were successful or skipped.
          "$(jq -r 'all(.result as $result | (["success", "skipped"] | contains([$result])))' <<< "${needs}")"
        env:
          needs: ${{ toJson(needs) }}
